tic

% Finds the roots of an equation
function solutions = FindRoots(f,lower_bound,upper_bound) 
    tol = 1e-7; %Used to avoid double-counting roots
    solutions = [];
    stack = {[lower_bound,upper_bound]};
    while ~isempty(stack)
        interval = stack{end};
        stack(end) = [];
        l = interval(1);
        u = interval(2);
        if f(l)*f(u) < 0 %Checks if fzero can be run in this case
           [X,FVAL,EXITFLAG] = fzero(f,[l,u]);
           if EXITFLAG > 0
               solutions = [solutions, X];
               stack = [stack,{[l, X-tol]}];
               stack = [stack, {[X+tol, u]}];
               %Bisects the interval into two disjoint intervals, then searches those for roots
           end
           if EXITFLAG <= 0 %Handles errors
               disp('Warning: fsolve failed; printing EXITFLAG in next line')
               disp(EXITFLAG)
           end
       else
           %Given the endpoints of the interval both give outputs of the same sign (say, positive),
           %we then check the minimum between the two to see if any roots exist
           if f(l) > 0
               X = fminbnd(f,l,u); 
               if f(X) < 0
                   stack = [stack,{[l, X-tol]}];
                   stack = [stack, {[X+tol, u]}];
                   %Bisects the interval into two disjoint intervals, then searches those for roots
               end
           else
               g = @(x) -f(x); %MATLAB has no 'fmaxbnd' function so we must
               %multiply everything by -1, then proceed as above
               X = fminbnd(g,l,u); 
               if f(X) > 0
                   stack = [stack,{[l, X-tol]}];
                   stack = [stack, {[X+tol, u]}];
                   %Bisects the interval into two disjoint intervals, then searches those for roots
               end

           end
       end
    end
end


% Jacobian function
function jac = Jacobian(C_vec,M,A_mat,I,P)
    first_vec = r(M) - A_mat * C_vec;
    top_left = - A_mat.*C_vec + diag(first_vec);    
    top_right = C_vec.*rdash(M);
    bottom_left = -P*M*ones(1,length(C_vec));
    bottom_right = -I/M;
    top = [top_left,top_right];
    bottom = [bottom_left,bottom_right];
    jac = [top;bottom];
end


% Turns a number into binary
function bin = turn_binary(j,N)
    number = j;
    index = N;
    binary = zeros(1,N);
    while number > 0
        binary(index) = mod(number, 2); 
        number = floor(number / 2); 
        index = index - 1; 
    end
    bin = binary;
end





% To create the plots, complete the following instructions from
% items 1 to 8.

N = 2; % 1 - CHANGE THE NUMBER OF SPECIES


% 2 - INPUT YOUR EQUATIONS FOR R(M) AS A VECTOR
function r_result = r(M)
    r_result = [
        sech(M-5) - 0.2;
        sech(M-6) - 0.2];
end

% 3 - INPUT YOUR EQUATIONS FOR R'(M) AS A VECTOR
function r_dash_result = rdash(M)
    r_dash_result = [
        -tanh(M-5)*sech(M-5);
        -tanh(M-6)*sech(M-6)];
end


% Reduces r
function r_s = reduced(indices, M)
   r_s = r(M);
   r_s = r_s(indices);
end


% 4 - CHANGE I AND P (and hash out when not in use)
I = 8.5;
P = 3;

% 5 - CHOOSE THE LENGTH OF YOUR PLOTS AND HOW MANY POINTS ON EACH AXIS
x_min = 0.01;
x_max = 25;
y_min = 0.01;
y_max = 10;

num_points = 300;

% This is a 3x3 array containing all the data we need. Each "layer" for a
% given z-value describes one of the equivalent equilibria types, of which
% there are 2^N in total
colours = zeros(num_points,num_points,2^N);

y_num=0;
% 6 - PLACE THE PARAMETER YOU WANT ON THE Y-AXIS HERE
for A11 = linspace(y_min,y_max,num_points)

    y_num = y_num + 1;
    x_num = 0;

    % 7 - PLACE THE PARAMETER YOU WANT ON THE X-AXIS HERE 
    for I = linspace(x_min,x_max,num_points)
        x_num = x_num + 1;
        
        %8 - CHANGE YOUR STRUCTURE AND VALUES OF A
        % (and hash out when not in use)
        %A11 = 0.5
        A12 = 0;
        A21 = 0;
        A22 = 5;

        A = [A11, A12;
        A21, A22];

        % For n-species, there are 2^N possible equilibria. We go through
        % each of these equilibria with a for loop (instead of 1 to 2^N, we
        % do 0 to 2^N - 1). We also separate j = 0 as a boundary case.
        
        %j = 0 (Extinction)
        J_num = Jacobian(zeros(N,1),I,A,I,P);
        eigenvalues = real(eig(J_num));
        %disp(eigenvalues)
        if all (eigenvalues < 0)
            colours(y_num,x_num,1) = 1;
        end

        for j = 1:2^N-1      
            binary = turn_binary(j,N);      % Represent as a binary number
            % If binary(i) = 0, C_i is dead at this equilibrium
            % If binary(i) = 1, C_i survives at this equilibrium
            surviving_Cs = find(binary);    % Make a list of positions of surviving C_i's
            reduced_A = A(surviving_Cs,surviving_Cs);   % Reduce A
            reduced_r = @(M) reduced(surviving_Cs,M);   % Reduce r
            F = @(M) reduced_A \ reduced_r(M);
            G = @(M) I - M*(1 + P*ones(1,length(surviving_Cs))*(F(M)));
            total_stable = 0;
            for root = FindRoots(G,0,I) % Solve the equation in terms of M
                C_vect = reduced_A \ reduced_r(root); % Work out the positive Cs
                if all (C_vect >= 0)
                    C_full = zeros(N,1);
                    for i = 1:length(C_vect)
                        C_full(surviving_Cs(i)) = C_vect(i); % Add them to the full C vector
                    end
                    J_num = Jacobian(C_full,root,A,I,P);
                    eigenvalues = real(eig(J_num));
                    if all (eigenvalues < 0)            % If all evals negative, increase number of stable 
                        total_stable = total_stable + 1;
                    end
                end
            end
            
            colours(y_num,x_num,j+1) = total_stable; % Add this data to the main array

        end
    end
end

customColorMap = [
    0, 0, 0; % 0 = black
    1, 0, 0; % 1 = red
    0, 0, 1  % 2 = blue
    ];

% Finally, plot the points using imagesc

yspace = linspace(y_min,y_max,num_points);
xspace = linspace(x_min,x_max,num_points);

for i = 1:2^N
    figure;
    colormap(customColorMap)
    imagesc(xspace,yspace,colours(:,:,i))
    set(gca, 'CLim', [0 length(customColorMap) - 1]);
    axis xy
end


toc
